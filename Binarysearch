
33. Search in Rotated Sorted Array
https://leetcode.com/problems/search-in-rotated-sorted-array/
class Solution:
    def search(self, nums: List[int], target: int) -> int:
        if not nums:
            return -1
        l, r = 0, len(nums)-1
        while l <= r:
            mid = (l+r)//2
            if nums[mid] == target:
                return mid
            if nums[mid] >= nums[l]:
                if nums[l] <= target < nums[mid]:
                    r = mid - 1
                else:
                    l = mid + 1
            else:
                if nums[mid] < target <= nums[r]:
                    l = mid + 1
                else:
                    r = mid - 1
        return -1


#######  to handle duplicates  #######
class Solution:
    def search(self, nums: List[int], target: int) -> bool:
        l, r = 0, len(nums)-1
        while l <= r:
            while l < r and nums[l] == nums[l+1]:
                l += 1
            while l < r and nums[r] == nums[r-1]:
                r -= 1
            mid = l+(r-l)//2
            if nums[mid] == target:
                return True
            if nums[mid] >= nums[l]:
                if nums[l] <= target < nums[mid]:
                    r = mid - 1
                else:
                    l = mid + 1
            else:
                if nums[mid] < target <= nums[r]:
                    l = mid + 1
                else:
                    r = mid - 1
        return False

34. Find First and Last Position of Element in Sorted Array
https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/

class Solution(object):
    def searchRange(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        if not nums:
            return [-1,-1]
        left = self.leftmost(nums,target)
        right = self.rightmost(nums,target)
        return [left, right]
    
    def leftmost(self, nums, target):
        left, right = 0, len(nums)-1
        while left <= right:
            mid = left + (right-left)/2
            if nums[mid] == target:
                right = mid - 1
            elif nums[mid] > target:
                right = mid - 1
            elif nums[mid] < target:
                left = mid + 1
        if left >= len(nums) or nums[left] != target:
            return -1
        return left
        
    def rightmost(self, nums, target):
        left, right = 0, len(nums)-1
        while left <= right:
            mid = left + (right-left)/2
            if nums[mid] == target:
                left = mid + 1
            elif nums[mid] > target:
                right = mid - 1
            elif nums[mid] < target:
                left = mid + 1
        if right < 0 or nums[right] != target:
            return -1 
        return right
        
35. Search Insert Position
https://leetcode.com/problems/search-insert-position/
#########  can handle duplicates  #############
class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        l,r = 0, len(nums)-1
        while l <= r:
            mid = (l+r) // 2
            if nums[mid] >= target:
                if nums[mid] == target and nums[mid-1] != target:
                    return mid
                else:
                    r = mid - 1
            else:
                l = mid + 1
        return l
            
153. Find Minimum in Rotated Sorted Array
https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/
class Solution:
    def findMin(self, nums: List[int]) -> int:
        def getInfelctionPoint(nums):
            l, r = 0, len(nums)-1
            while l <= r:
                mid = (l+r)//2
                if mid == len(nums)-1 or nums[mid] > nums[mid+1]:
                    return mid
                elif nums[mid] >= nums[l]:
                    l = mid + 1
                else:
                    r = mid - 1
            return l
        ip = getInfelctionPoint(nums)
        if ip == len(nums)-1:
            return nums[0]
        return min(nums[0], nums[ip+1])
        
154. Find Minimum in Rotated Sorted Array II(with duplicates)
https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii/
class Solution:
    def findMin(self, nums: List[int]) -> int:
        def getInfelctionPoint(nums):
            l, r = 0, len(nums)-1
            while l <= r:
                while l < r and nums[l] == nums[l+1]:
                    l += 1
                while l < r and nums[r] == nums[r-1]:
                    r -= 1
                if l == r:
                    return l
                mid = (l+r)//2
                if mid == len(nums)-1 or nums[mid] > nums[mid+1]:
                    return mid
                if nums[mid] >= nums[l]:
                    l = mid + 1
                else:
                    r = mid
            return l
        ip = getInfelctionPoint(nums)
        if ip == len(nums)-1:
            return nums[0]
        return  min(nums[0],nums[ip+1])

704. Binary Search
https://leetcode.com/problems/binary-search/

class Solution(object):
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        if not nums:
            return -1
        left, right = 0, len(nums) - 1
        while left <= right:
            mid = left + (right-left)/2
            if nums[mid] == target:
                return mid
            elif nums[mid] > target:
                right = mid - 1
            elif nums[mid] < target:
                left = mid + 1
        return -1
     

700. Search in a Binary Search Tree
https://leetcode.com/problems/search-in-a-binary-search-tree/
class Solution(object):
#T:O(n)
#S:O(1)
    def searchBST(self, root, val):
        """
        :type root: TreeNode
        :type val: int
        :rtype: TreeNode
        """
        if not root:
            return 
        if root.val == val:
            return root
        if root.val < val:
            return self.searchBST(root.right, val)
        elif root.val > val:
            return self.searchBST(root.left, val)

1198. Find Smallest Common Element in All Rows
https://leetcode.com/problems/find-smallest-common-element-in-all-rows/
#T:O(m*n*logm)
#S:O(1)
class Solution:
    def smallestCommonElement1(self, mat: List[List[int]]) -> int:
        for element in mat[0]:
            flag = True
            for row in mat[1:]:
                if not self.binarysearch(row, element):
                    flag = False
                    break
            if flag:
                return element
        return -1
    def binarysearch(self, row, element):
        if element < row[0]:
            return False
        if element > row[-1]:
            return False
        i,j = 0, len(row)-1
        while i<=j:
            mid = (i+j)//2
            if row[mid] == element:
                return True
            elif row[mid] < element:
                i = mid + 1
            else:
                j = mid - 1
        return False

1351. Count Negative Numbers in a Sorted Matrix
https://leetcode.com/problems/count-negative-numbers-in-a-sorted-matrix/
class Solution:
T:O(mlogn)
    def countNegatives(self, grid: List[List[int]]) -> int:
        m,n = len(grid), len(grid[0])
        res = 0
        def find0(row):
            l, r = 0, len(row)-1
            while l <= r:
                mid = l + (r-l)//2
                if row[mid] < 0:
                    r = mid-1
                else:
                    l = mid+1
            return len(row)-l
        for row in grid:
            res += find0(row)
        return res
        
 T:O(m+n)           
 class Solution:
    def countNegatives(self, grid: List[List[int]]) -> int:
        m,n = len(grid), len(grid[0])
        res = 0
        row, col = m-1, 0
        while row >= 0 and col < n:
            if grid[row][col] <0:
                res += n - col
                row -= 1
            else:
                col += 1
        return res       

1385. Find the Distance Value Between Two Arrays
https://leetcode.com/problems/find-the-distance-value-between-two-arrays/
#T:O(nlogn)
#S:O(logn)
class Solution:
    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:
        arr2.sort()
        def isvaild(val):
            l,r = 0, len(arr2)-1
            while l <= r:
                mid = (l+r) // 2
                if abs(arr2[mid] - val) <= d:
                    return False
                elif arr2[mid] > val:
                    r = mid - 1
                else:
                    l = mid + 1
            return True
        return sum(isvaild(val) for val in arr1)
