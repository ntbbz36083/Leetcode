704. Binary Search
https://leetcode.com/problems/binary-search/

class Solution(object):
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        if not nums:
            return -1
        left, right = 0, len(nums) - 1
        while left <= right:
            mid = left + (right-left)/2
            if nums[mid] == target:
                return mid
            elif nums[mid] > target:
                right = mid - 1
            elif nums[mid] < target:
                left = mid + 1
        return -1
        
34. Find First and Last Position of Element in Sorted Array
https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/

class Solution(object):
    def searchRange(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        if not nums:
            return [-1,-1]
        left = self.leftmost(nums,target)
        right = self.rightmost(nums,target)
        return [left, right]
    
    def leftmost(self, nums, target):
        left, right = 0, len(nums)-1
        while left <= right:
            mid = left + (right-left)/2
            if nums[mid] == target:
                right = mid - 1
            elif nums[mid] > target:
                right = mid - 1
            elif nums[mid] < target:
                left = mid + 1
        if left >= len(nums) or nums[left] != target:
            return -1
        return left
        
    def rightmost(self, nums, target):
        left, right = 0, len(nums)-1
        while left <= right:
            mid = left + (right-left)/2
            if nums[mid] == target:
                left = mid + 1
            elif nums[mid] > target:
                right = mid - 1
            elif nums[mid] < target:
                left = mid + 1
        if right < 0 or nums[right] != target:
            return -1 
        return right

100. Same Tree
https://leetcode.com/problems/same-tree/
#T:O(n)
#S:O(1)
class Solution(object):
    def isSameTree(self, p, q):
        """
        :type p: TreeNode
        :type q: TreeNode
        :rtype: bool
        """
        if not p and not q:
            return True
        if not p or not q:
            return False
        if p.val != q.val:
            return False
        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)
        
        
98. Validate Binary Search Tree        
https://leetcode.com/problems/validate-binary-search-tree/
class Solution(object):
#T:O(n)
#S:O(1)
    def isValidBST(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        def helper(node, min_l, max_l):
            if not node:
                return True
            if min_l and node.val <= min_l.val:
                return False
            if max_l and node.val >= max_l.val:
                return False
            return helper(node.left, min_l, node) and helper(node.right, node, max_l)
        return helper(root, None, None)

700. Search in a Binary Search Tree
https://leetcode.com/problems/search-in-a-binary-search-tree/
class Solution(object):
#T:O(n)
#S:O(1)
    def searchBST(self, root, val):
        """
        :type root: TreeNode
        :type val: int
        :rtype: TreeNode
        """
        if not root:
            return 
        if root.val == val:
            return root
        if root.val < val:
            return self.searchBST(root.right, val)
        elif root.val > val:
            return self.searchBST(root.left, val)

701. Insert into a Binary Search Tree
https://leetcode.com/problems/insert-into-a-binary-search-tree/
class Solution(object):
#T:O(n)
#S:O(n)
    def insertIntoBST(self, root, val):
        """
        :type root: TreeNode
        :type val: int
        :rtype: TreeNode
        """
        if not root:
            return TreeNode(val)
        if root.val < val:
            root.right = self.insertIntoBST(root.right, val)
        elif root.val > val:
            root.left = self.insertIntoBST(root.left, val)
        return root
