46. Permutations
https://leetcode.com/problems/permutations/
class Solution(object):
    def permute(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        res = []
        visited = set()
        self.dfs(nums,visited, [], res)
        return res
    def dfs(self, nums, visited, path, res):
        if len(path) == len(nums):
            res.append(path)
        for i in range(len(nums)):
            if i not in visited:
                visited.add(i)
                self.dfs(nums, visited, path + [nums[i]], res)
                visited.remove(i)
                
51. N-Queens
https://leetcode.com/problems/n-queens/

class Solution(object):
    def solveNQueens(self, n):
        """
        :type n: int
        :rtype: List[List[str]]
        """
        self.n = n
        res = []
        board = [["." for _ in range(n)] for _ in range(n)]
        self.backtrack(board, 0, res)
        return res
        
    def backtrack(self, board, row, res):
        if row == self.n:
            new = [''.join(x) for x in board]
            res.append(new)
            return
        for col in range(self.n):
            if self.isVaild(board, row, col):
                board[row][col] = 'Q'
                self.backtrack(board,row+1, res)
                board[row][col] = '.'

    def isVaild(self, board, row, col):
        for i in range(row):
            if board[i][col] == 'Q':
                return False
        i,j=0,0
        for r, c in zip(range(row, -1, -1), range(col, -1, -1)):
            if board[r][c] == "Q":
                return False
        for r, c in zip(range(row, -1, -1), range(col, self.n)):
            if board[r][c] == "Q":
                return False
        return True
        
