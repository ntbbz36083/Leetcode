3. Longest Substring Without Repeating Characters
https://leetcode.com/problems/longest-substring-without-repeating-characters/

class Solution(object):
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        left, right = 0, 0
        window = {}
        res = 0
        
        while right < len(s):
            c1 = s[right]
            window[c1] = window.get(c1,0)+1
            right += 1
            while window[c1]>1:
                c2 = s[left]
                window[c2] -= 1
                left += 1
            res = max(res, right-left)
        return res

76. Minimum Window Substring
https://leetcode.com/problems/minimum-window-substring/

class Solution(object):
    def minWindow(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: str
        """
        start, min_len = 0, float('inf')
        left, right = 0, 0
        window, need = {}, {}
        for ch in t:
            need[ch] = need.get(ch,0) + 1
        match = 0
        while right < len(s):
            c1 = s[right]
            if c1 in need:
                window[c1] = window.get(c1,0) + 1
                if window[c1] == need[c1]:
                    match += 1
            right += 1
            
            while match == len(need):
                if right - left < min_len:
                    start = left
                    min_len = right - left
                c2 = s[left]
                if c2 in need:
                    window[c2] = window.get(c2)-1
                    if window[c2] < need[c2]:
                        match -= 1
                left += 1
        return s[start:start+min_len] if min_len != float('inf') else ""

159. Longest Substring with At Most Two Distinct Characters
https://leetcode.com/problems/longest-substring-with-at-most-two-distinct-characters/
#T:O(n), worst nk
#S:O(n)
class Solution:
    def lengthOfLongestSubstringTwoDistinct(self, s: str) -> int:
        n = len(s)
        if not n:
            return 0
        left, right, max_len = 0, 0, 1
        d = collections.defaultdict(int)
        while right < n:
            d[s[right]] = right
            right += 1
            
            if len(d) == 3:
                del_ind = min(d.values())
                del d[s[del_ind]] 
                left = del_ind + 1
                
            max_len = max(max_len, right-left)
        return max_len

239. Sliding Window Maximum
https://leetcode.com/problems/sliding-window-maximum/
class Solution:
#T:O(nk)
#S:O(k)
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        # edge case
        if not nums:
            return []
        if not k:
            return nums
        
        deq = collections.deque()
        res = []
        
        for i in range(len(nums)):
            # start a new window, need to delete old max value's index
            if deq and i - deq[0] == k:
                deq.popleft()
            # while q, if new value bigger, remove old val in q, othervise break
            while deq:
                if nums[deq[-1]] < nums[i]:
                    deq.pop()
                else:
                    break
            # q apprend new i
            deq.append(i)
            # i == k-1 is the start of a new widnow, append the old max val
            if i >= k-1:
                res.append(nums[deq[0]])
        return res

340. Longest Substring with At Most K Distinct Characters
https://leetcode.com/problems/longest-substring-with-at-most-k-distinct-characters/
#T:O(n), worst nk
#S:O(n)
class Solution:
    def lengthOfLongestSubstringKDistinct(self, s: str, k: int) -> int:
        n = len(s)
        if n * k == 0:
            return 0
        left, right, max_len = 0, 0, 1
        d = collections.defaultdict(int)
        while right < n:
            d[s[right]] = right
            right += 1
            
            if len(d) == k+1:
                del_ind = min(d.values())
                del d[s[del_ind]] 
                left = del_ind + 1
                
            max_len = max(max_len, right-left)
        return max_len

395. Longest Substring with At Least K Repeating Characters
https://leetcode.com/problems/longest-substring-with-at-least-k-repeating-characters/
class Solution:
#T:O(26n)
#S:O(26)
    def longestSubstring(self, s: str, k: int) -> int:
        res = 0
        n = len(collections.Counter(s))+1
        # each round we only check T number different char possible answer
        # T means how many different char we can have in this round of 
        # sliding window
        for T in range(1, n):
            left, right, found, freq, cn = 0, 0, 0, [0]*26, 0
            while right < len(s):
                # if current char number less than T, which means we can add more char in
                if cn <= T:
                    cur = ord(s[right]) - 97
                    freq[cur] += 1
                    if freq[cur] == 1:
                        cn += 1
                    if freq[cur] == k:
                        found += 1
                    right += 1
                # we can't add more char since we run out of char, we need to pop char now
                else:
                    pop = ord(s[left]) - 97
                    left += 1
                    if freq[pop] == k:
                        found -= 1
                    freq[pop] -= 1
                    if freq[pop] ==0:
                        cn -= 1
                if cn == T and found == T:
                    res = max(res, right-left)
        return res

424. Longest Repeating Character Replacement
https://leetcode.com/problems/longest-repeating-character-replacement/
class Solution:
    def characterReplacement(self, s: str, k: int) -> int:
        lo, hi, res = 0, 0, 0
        count = collections.Counter()
        while hi < len(s):
            cur = s[hi]
            hi += 1
            count[cur] += 1
            maxf = max(count.values())
            while lo < hi and hi - lo - maxf > k:
                count[s[lo]] -= 1
                lo += 1
            res = max(res, hi-lo)
        return res

438. Find All Anagrams in a String
https://leetcode.com/problems/find-all-anagrams-in-a-string/

class Solution(object):
    def findAnagrams(self, s, p):
        """
        :type s: str
        :type p: str
        :rtype: List[int]
        """
        start, left, right, match = 0, 0, 0, 0
        window, need = {}, {}
        res = []
        for ch in p:
            need[ch] = need.get(ch,0)+1
        
        while right < len(s):
            ch = s[right]
            if ch in need:
                window[ch] = window.get(ch,0)+1
                if window[ch] == need[ch]:
                    match += 1
            right += 1
            while match == len(need):
                if right - left == len(p):
                    res.append(left)
                c2 = s[left]
                if c2 in need:
                    window[c2] -= 1
                    if window[c2] < need[c2]:
                        match -= 1
                left += 1
        return res

567. Permutation in String
https://leetcode.com/problems/permutation-in-string/

class Solution(object):
    def checkInclusion(self, s1, s2):
        """
        :type s1: str
        :type s2: str
        :rtype: bool
        """
        left, right, match = 0, 0, 0
        window, need = {}, {}
        for ch in s1:
            need[ch] = need.get(ch,0)+1
        while right < len(s2):
            c1 = s2[right]
            right += 1
            if c1 in need:
                window[c1] = window.get(c1,0)+1
                if window[c1] == need[c1]:
                    match += 1
            while right - left >= len(s1):
                if match == len(need):
                    return True
                c2 = s2[left]
                left += 1
                if c2 in need:
                    if window[c2] == need[c2]:
                        match -= 1
                    window[c2] -= 1      
        return False

487. Max Consecutive Ones II
https://leetcode.com/problems/max-consecutive-ones-ii/
class Solution:
    def findMaxConsecutiveOnes(self, nums: List[int]) -> int:
        max_len = 0
        zero = 0
        left, right = 0,0
        while right < len(nums):
            zero += 1 - nums[right]
            right += 1
            if zero > 1:
                zero -= 1 -nums[left]
                left += 1
            max_len = max(max_len, right-left)
        return max_len

################################  Follow up  ################################
What if the input numbers come in one by one as an infinite stream? 
In other words, you can't store all numbers coming from the stream as it's too large to hold in memory.
class Solution:
    def findMaxConsecutiveOnes(self, nums: List[int]) -> int:
        # previous and current length of consecutive 1 
        pre, curr, maxlen = -1, 0, 0
        for n in nums:
            if n == 0:
                pre, curr = curr, 0
            else:
                curr += 1
            maxlen = max(maxlen, pre + 1 + curr )
        
        return maxlen
        
1004. Max Consecutive Ones III
https://leetcode.com/problems/max-consecutive-ones-iii/
class Solution:
    def longestOnes(self, A: List[int], K: int) -> int:
        max_len = 0
        zero = 0
        left, right = 0,0
        # basiclly we count the number of zeros of current window
        # if it is more than K, we need to move left pointer unitl some amount of 
        # zero is removed so we can continue, if new window has bigger range, check
        while right < len(A):
            zero += 1 - A[right]
            right += 1
            if zero > K:
                zero -= 1 -A[left]
                left += 1
            if max_len < right-left:
                max_len = right-left
        return max_len

1176. Diet Plan Performance
https://leetcode.com/problems/diet-plan-performance/
class Solution:
    def dietPlanPerformance(self, calories: List[int], k: int, lower: int, upper: int) -> int:
        lo, hi, temp,res = 0, 0, 0, 0
        while hi < len(calories):
            cur = calories[hi]
            hi += 1
            temp += cur
            k -= 1
            if k == 0:
                if temp > upper:
                    res +=1
                elif temp < lower:
                    res -= 1
                temp -= calories[lo]
                k += 1
                lo += 1
        return res

1423. Maximum Points You Can Obtain from Cards
https://leetcode.com/problems/maximum-points-you-can-obtain-from-cards/
class Solution:
    def maxScore(self, cardPoints: List[int], k: int) -> int:
        # translate question to find minvalue subarry from array with size k
        size = len(cardPoints) - k
        cur, j, min_sum = 0, 0, float('inf')
        # i is rightmost index, j is leftmost index
        for i, v in enumerate(cardPoints):
            cur += v
            # if subarry > size, we need to subtract leftmost value
            if i -j +1 > size:
                cur -= cardPoints[j]
                j += 1
            if i -j + 1 == size:
                min_sum = min(min_sum, cur)
        return sum(cardPoints) - min_sum
