3. Longest Substring Without Repeating Characters
https://leetcode.com/problems/longest-substring-without-repeating-characters/

class Solution(object):
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        left, right = 0, 0
        window = {}
        res = 0
        
        while right < len(s):
            c1 = s[right]
            window[c1] = window.get(c1,0)+1
            right += 1
            while window[c1]>1:
                c2 = s[left]
                window[c2] -= 1
                left += 1
            res = max(res, right-left)
        return res

76. Minimum Window Substring
https://leetcode.com/problems/minimum-window-substring/

class Solution(object):
    def minWindow(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: str
        """
        start, min_len = 0, float('inf')
        left, right = 0, 0
        window, need = {}, {}
        for ch in t:
            need[ch] = need.get(ch,0) + 1
        match = 0
        while right < len(s):
            c1 = s[right]
            if c1 in need:
                window[c1] = window.get(c1,0) + 1
                if window[c1] == need[c1]:
                    match += 1
            right += 1
            
            while match == len(need):
                if right - left < min_len:
                    start = left
                    min_len = right - left
                c2 = s[left]
                if c2 in need:
                    window[c2] = window.get(c2)-1
                    if window[c2] < need[c2]:
                        match -= 1
                left += 1
        return s[start:start+min_len] if min_len != float('inf') else ""

438. Find All Anagrams in a String
https://leetcode.com/problems/find-all-anagrams-in-a-string/

class Solution(object):
    def findAnagrams(self, s, p):
        """
        :type s: str
        :type p: str
        :rtype: List[int]
        """
        start, left, right, match = 0, 0, 0, 0
        window, need = {}, {}
        res = []
        for ch in p:
            need[ch] = need.get(ch,0)+1
        
        while right < len(s):
            ch = s[right]
            if ch in need:
                window[ch] = window.get(ch,0)+1
                if window[ch] == need[ch]:
                    match += 1
            right += 1
            while match == len(need):
                if right - left == len(p):
                    res.append(left)
                c2 = s[left]
                if c2 in need:
                    window[c2] -= 1
                    if window[c2] < need[c2]:
                        match -= 1
                left += 1
        return res

567. Permutation in String
https://leetcode.com/problems/permutation-in-string/

class Solution(object):
    def checkInclusion(self, s1, s2):
        """
        :type s1: str
        :type s2: str
        :rtype: bool
        """
        left, right, match = 0, 0, 0
        window, need = {}, {}
        for ch in s1:
            need[ch] = need.get(ch,0)+1
        while right < len(s2):
            c1 = s2[right]
            right += 1
            if c1 in need:
                window[c1] = window.get(c1,0)+1
                if window[c1] == need[c1]:
                    match += 1
            while right - left >= len(s1):
                if match == len(need):
                    return True
                c2 = s2[left]
                left += 1
                if c2 in need:
                    if window[c2] == need[c2]:
                        match -= 1
                    window[c2] -= 1      
        return False
