141. Linked List Cycle
https://leetcode.com/problems/linked-list-cycle/
class Solution(object):
    def hasCycle(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
        fast = slow = head
        while fast and fast.next:
            fast = fast.next.next
            slow = slow.next
            if fast == slow:
                return True
        return False

142. Linked List Cycle II
https://leetcode.com/problems/linked-list-cycle-ii/
        
class Solution(object):
    def detectCycle(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        slow = fast = head
        while fast and fast.next:
            fast = fast.next.next
            slow = slow.next
            if fast == slow:
                break
        else:
            return None
        slow = head
        while slow != fast:
            slow = slow.next
            fast = fast.next
        return slow
        
        
206. Reverse Linked List
https://leetcode.com/problems/reverse-linked-list/
class Solution(object):
#T:O(n)
#S:O(1)
    def reverseList1(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        pre = None
        while head:
            cur = head
            head = head.next
            cur.next = pre   
            pre = cur
        return pre

    def reverseList(self, head):
        def helper(node, prev=None):
            if not node:
                return prev
            n = node.next
            node.next = prev
            return helper(n,node)
        return helper(head)
        
92. Reverse Linked List II
https://leetcode.com/problems/reverse-linked-list-ii/
class Solution(object):
#T:O(n)
#S:O(1)
    def reverseBetween(self, head, m, n):
        """
        :type head: ListNode
        :type m: int
        :type n: int
        :rtype: ListNode
        """
        self.succ = ListNode(None)
        if m == 1:
            return self.helper(head,n)
        head.next = self.reverseBetween(head.next,m-1,n-1)
        return head
        
    def helper(self, head, n):
        
        if n == 1:
            self.succ = head.next
            return head
        last = self.helper(head.next,n-1)
        head.next.next = head
        head.next = self.succ
        return last
