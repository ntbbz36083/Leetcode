509. Fibonacci Number
https://leetcode.com/problems/fibonacci-number/
class Solution(object):
    def fib(self, N):
        """
        :type N: int
        :rtype: int
        """
        if N <1:
            return 0
        dic = {}
        def helper(N):
            if N==1 or N==2:
                return 1
            if N in dic:
                return dic[N]
            dic[N] = helper(N-1)+helper(N-2)
            return dic[N]
        return helper(N)
        
class Solution(object):
    def fib(self, N):
        """
        :type N: int
        :rtype: int
        """
        if not N:
            return 0
        if N==1 or N==2:
            return 1
        prev, cur = 1, 1
        for i in range(3,N+1):
            sum1 = prev + cur
            prev = cur
            cur = sum1
        return cur
        
322. Coin Change
https://leetcode.com/problems/coin-change/
class Solution(object):
    def coinChange(self, coins, amount):
        """
        :type coins: List[int]
        :type amount: int
        :rtype: int
        """
        memo = {}
        def helper(n):
            if n in memo:
                return memo[n]
            if n == 0:
                return 0
            if n < 0:
                return -1
            res = float('inf')
            for coin in coins:
                subquery = helper(n-coin)
                if subquery == -1:
                    continue
                res = min(res, 1+subquery)
            memo[n]=res if res != float('inf') else -1
            return memo[n]
        return helper(amount)
class Solution(object):
    def coinChange(self, coins, amount):
        """
        :type coins: List[int]
        :type amount: int
        :rtype: int
        """
        dp = [amount+1] * (amount+1)
        dp[0]=0
        for i in range(0,len(dp)):
            for coin in coins:
                if i - coin < 0:
                    continue
                dp[i] = min(dp[i], 1 + dp[i - coin])
        return dp[amount] if dp[amount] != amount+1 else -1 
        
