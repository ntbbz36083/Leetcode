7. Reverse Integer
https://leetcode.com/problems/reverse-integer/
        
def reverse(self, x):
        """
        :type x: int
        :rtype: int
        """
        if x > 0:
            return self.re(x)
        else:
            return -self.re(-x)
        
    def re(self, x):
        res = 0
        while x:
            digit = x % 10
            res = res * 10 + digit
            x = int(x/10)
        return 0 if res > pow(2,31) or res < -pow(2,31) else res

12. Integer to Roman
https://leetcode.com/problems/integer-to-roman/

def intToRoman(self, num):
        """
        :type num: int
        :rtype: str
        """
        values = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ]   
        numerals = [ "M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I" ]
        res, i = '', 0
        while num:
            res += (num // values[i]) * numerals[i]
            num %= values[i]
            i += 1
        return res

13. Roman to Integer
https://leetcode.com/problems/roman-to-integer/

def romanToInt(self, s):
        """
        :type s: str
        :rtype: int
        """
        roman = {'M': 1000,'D': 500 ,'C': 100,'L': 50,'X': 10,'V': 5,'I': 1}
        z = 0
        for i in range(0,len(s)-1):
            if roman[s[i]] < roman[s[i+1]]:
                z -= roman[s[i]]
            else:
                z += roman[s[i]]
        return z + roman[s[-1]]
        

20. Valid Parentheses
https://leetcode.com/problems/valid-parentheses/
def isValid(self, s):
        """
        :type s: str
        :rtype: bool
        """
        if not s:
            return True
        stack = ['N']
        dic = {')':'(',
              ']':'[',
              '}':'{'}
        for ch in s:
            if ch in dic:
                if stack.pop() != dic[ch]:
                    return False
            else:
                stack.append(ch)
        return len(stack) == 1

21. Merge Two Sorted Lists
https://leetcode.com/problems/merge-two-sorted-lists/

def mergeTwoLists(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        #T:O(n)
        #S:O(n)
        if  not l1 and not l2:
            return
        head = new = ListNode(0)
        while l1 and l2:
            if l1.val > l2.val:
                new.next = l2
                l2 = l2.next
            else:
                new.next = l1
                l1 = l1.next
            new = new.next
        if l1:
            new.next = l1
        if l2:
            new.next = l2
        return head.next

26. Remove Duplicates from Sorted Array
https://leetcode.com/problems/remove-duplicates-from-sorted-array/
class Solution(object):
    def removeDuplicates(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        slow, fast = 0,0
        while fast < len(nums):
            if nums[slow] != nums[fast]:
                slow += 1
                nums[slow] = nums[fast]    
            fast += 1
        return slow+1

27. Remove Element
https://leetcode.com/problems/remove-element/
class Solution(object):
    def removeElement(self, nums, val):
        """
        :type nums: List[int]
        :type val: int
        :rtype: int
        """
        slow, fast = 0,0
        while fast < len(nums):
            if nums[fast] != val:
                nums[slow] = nums[fast]
                slow += 1
            fast += 1
        return slow

53. Maximum Subarray
https://leetcode.com/problems/maximum-subarray/

def maxSubArray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        #t:O(n)
        #s:O(1)
        if not nums:
            return 
        cur = ms = nums[0]
        for num in nums[1:]:
            cur = max(cur+num, num)
            ms = max(ms, cur)
        return ms

88. Merge Sorted Array
https://leetcode.com/problems/merge-sorted-array/

def merge(self, nums1, m, nums2, n):
        """
        :type nums1: List[int]
        :type m: int
        :type nums2: List[int]
        :type n: int
        :rtype: None Do not return anything, modify nums1 in-place instead.
        """
        while m>0 and n>0:
            if nums1[m-1]>=nums2[n-1]:
                nums1[m+n-1] = nums1[m-1]
                m -= 1
            else:
                nums1[m+n-1] = nums2[n-1]
                n -= 1
        if n>0:
            nums1[:n] = nums2[:n]

121. Best Time to Buy and Sell Stock
https://leetcode.com/problems/best-time-to-buy-and-sell-stock/

def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        #T:O(n)
        #S:O(n)
        if not prices:
            return 0
        min_price = float('inf')
        max_profit = 0
        for price in prices:
            min_price = min(min_price, price)
            profit = price - min_price
            max_profit = max(max_profit, profit)
        return max_profit

167. Two Sum II - Input array is sorted
https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/
class Solution(object):
    def twoSum(self, numbers, target):
        """
        :type numbers: List[int]
        :type target: int
        :rtype: List[int]
        """
        left, right = 0, len(numbers)-1
        while left < right:
            if numbers[left] + numbers[right] > target:
                right -= 1
            elif numbers[left] + numbers[right] < target:
                left += 1
            else:
                return [left+1, right+1]

206. Reverse Linked List
https://leetcode.com/problems/reverse-linked-list/

def reverseList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        pre = None
        while head:
            cur = head
            head = head.next
            cur.next = pre
            pre = cur
        return pre
def reverseList(self, head, prev = None):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if not head:
            return prev
        cur = head.next
        head.next = prev
        return self.reverseList(cur, head)

234. Palindrome Linked List
https://leetcode.com/problems/palindrome-linked-list/

def isPalindrome(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
        if not head:
            return True
        def re(node, pre = None):
            while node:
                cur = node
                node = node.next
                cur.next = pre
                pre = cur
            return pre
        fast_head = slow_head = head
        while fast_head and fast_head.next:
            slow_head = slow_head.next
            fast_head = fast_head.next.next
        new_head = re(slow_head)
        while new_head:
            if head.val != new_head.val:
                return False
            head = head.next
            new_head = new_head.next
        return True

274. H-Index
https://leetcode.com/problems/h-index/
#T:O(n)
#S:O(n)
class Solution:
    def hIndex(self, citations: List[int]) -> int:
        n = len(citations)
        citecount = [0 for _ in range(n+1)]
        for c in citations:
            if c >= n:
                citecount[n] += 1
            else:
                citecount[c] += 1
        
        i = n-1
        while i >= 0:
            if citecount[i+1] >= i+1:
                return i + 1
            citecount[i] += citecount[i+1]
            i -= 1
        return 0

283. Move Zeroes
https://leetcode.com/problems/move-zeroes/

class Solution(object):
    def moveZeroes(self, nums):
        """
        :type nums: List[int]
        :rtype: None Do not return anything, modify nums in-place instead.
        """
        slow, fast = 0, 0
        while fast < len(nums):
            if nums[fast] != 0:
                nums[slow], nums[fast] = nums[fast], nums[slow]
                slow += 1
            fast += 1
        return slow

415. Add Strings
https://leetcode.com/problems/add-strings/

def addStrings(self, num1, num2):
        """
        :type num1: str
        :type num2: str
        :rtype: str
        """
        if len(num1) > len(num2):
            num1, num2 = num2, num1
        n1, n2 = len(num1), len(num2)
        num1, num2 = num1[::-1], num2[::-1]
        res = []
        carry = 0
        i = 0
        while i < n1: 
            temp = int(num1[i]) + int(num2[i]) + carry
            res.append(str(temp%10))
            carry = temp / 10
            i += 1
        while i < n2:
            temp = int(num2[i]) + carry
            res.append(str(temp%10))
            carry = temp / 10
            i += 1
        if carry:
            res.append('1')
        return ''.join(res[::-1])

624. Maximum Distance in Arrays
https://leetcode.com/problems/maximum-distance-in-arrays/
class Solution:
    def maxDistance(self, arrays: List[List[int]]) -> int:
        n = len(arrays)
        max_, min_ = arrays[0][-1], arrays[0][0]
        res = 0
        for array in arrays[1:]:
            res = max(res, max_ - array[0], array[-1] - min_)
            max_, min_ = max(array[-1], max_), min(array[0], min_)
        return res

937. Reorder Data in Log Files
https://leetcode.com/problems/reorder-data-in-log-files/

def reorderLogFiles(self, logs):
        """
        :type logs: List[str]
        :rtype: List[str]
        """
        #T:O(n)
        #S:O(n)
        digits = []
        letters = []
        for log in logs:
            if log.split()[1].isdigit():
                digits.append(log)
            else:
                letters.append(log)
        letters.sort(key=lambda x: (x.split()[1:],x.split()[0]))
        res = letters + digits
        return res

953. Verifying an Alien Dictionary
https://leetcode.com/problems/verifying-an-alien-dictionary/

def isAlienSorted(self, words, order):
        """
        :type words: List[str]
        :type order: str
        :rtype: bool
        """
        dic = {}
        for i, word in enumerate(order):
            dic[word] = i
        new_word = []
        for word in words:
            temp = []
            for w in word:
                temp.append(dic[w])
            new_word.append(temp)
        for w1, w2 in zip(new_word, new_word[1:]):
            if w1 > w2:
                return False
        return True

56. Merge Intervals
https://leetcode.com/problems/merge-intervals/
T:O(nlogn)
S:O(n)

class Solution(object):
    def merge(self, intervals):
        """
        :type intervals: List[List[int]]
        :rtype: List[List[int]]
        """
        if not intervals:
            return []
        intervals.sort(key=lambda a: a[0])
        res = [intervals[0]]
        for i in range(1,len(intervals)):
            cur = intervals[i]
            last = res[-1]
            if cur[0] <= last[-1]:
                last[-1] = max(cur[-1], last[-1])
            else:
                res.append(cur)
        return res
        
986. Interval List Intersections
https://leetcode.com/problems/interval-list-intersections/
T:O(n)
S:O(n)

class Solution(object):
    def intervalIntersection(self, A, B):
        """
        :type A: List[List[int]]
        :type B: List[List[int]]
        :rtype: List[List[int]]
        """
        i, j = 0, 0
        res = []
        while i < len(A) and j < len(B):
            a1, a2 = A[i][0], A[i][1]
            b1, b2 = B[j][0], B[j][1]
            if b2 >= a1 and a2 >= b1:
                res.append([max(a1,b1), min(a2,b2)])
            if b2 < a2:
                j += 1
            else:
                i += 1
        return res

1288. Remove Covered Intervals
https://leetcode.com/problems/remove-covered-intervals/
T:O(nlogn)
S:O(1)
class Solution(object):
    def removeCoveredIntervals(self, intervals):
        """
        :type intervals: List[List[int]]
        :rtype: int
        """
        res = right = 0
        intervals.sort(key=lambda a: (a[0], -a[1]))
        #print(intervals)
        for i, j in intervals:
            if j > right:
                res += 1
            right = max(right, j)
        return res
