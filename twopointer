26. Remove Duplicates from Sorted Array
https://leetcode.com/problems/remove-duplicates-from-sorted-array/
class Solution(object):
    def removeDuplicates(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        slow, fast = 0,0
        while fast < len(nums):
            if nums[slow] != nums[fast]:
                slow += 1
                nums[slow] = nums[fast]    
            fast += 1
        return slow+1

27. Remove Element
https://leetcode.com/problems/remove-element/
class Solution(object):
    def removeElement(self, nums, val):
        """
        :type nums: List[int]
        :type val: int
        :rtype: int
        """
        slow, fast = 0,0
        while fast < len(nums):
            if nums[fast] != val:
                nums[slow] = nums[fast]
                slow += 1
            fast += 1
        return slow

83. Remove Duplicates from Sorted List
https://leetcode.com/problems/remove-duplicates-from-sorted-list/
class Solution(object):
    def deleteDuplicates(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if not head:
            return head
        slow, fast = head, head
        while fast:
            if fast.val != slow.val:
                slow.next = fast
                slow = slow.next
            fast = fast.next
        slow.next = None
        return head

283. Move Zeroes
https://leetcode.com/problems/move-zeroes/

class Solution(object):
    def moveZeroes(self, nums):
        """
        :type nums: List[int]
        :rtype: None Do not return anything, modify nums in-place instead.
        """
        slow, fast = 0, 0
        while fast < len(nums):
            if nums[fast] != 0:
                nums[slow], nums[fast] = nums[fast], nums[slow]
                slow += 1
            fast += 1
        return slow

723. Candy Crush
#Worst case, everytime we only find one candy, thus we need run mn/3 times while loop, inside while loop,
#it is 2mn, so total time will be m^2n^2, space will be O(mn)
https://leetcode.com/problems/candy-crush/
class Solution:
    def candyCrush(self, board: List[List[int]]) -> List[List[int]]:
        m,n = len(board), len(board[0])
        while True:
            #check
            crush = set()
            for i in range(m):
                for j in range(n):
                    if i > 1 and board[i][j] and board[i][j] == board[i-1][j] == board[i-2][j]:
                        crush |= {(i,j),(i-1,j),(i-2,j)}
                    if j > 1 and board[i][j] and board[i][j] == board[i][j-1] == board[i][j-2]:
                        crush |= {(i,j),(i,j-1),(i,j-2)}
            #crush
            if not crush:
                break
            for i,j in crush:
                board[i][j] = 0
            
            #drop
            for j in range(n):
                idx = m - 1
                for i in reversed(range(m)):
                    if board[i][j]:
                        board[idx][j] = board[i][j]
                        idx -= 1
                for i in range(idx+1):
                    board[i][j] = 0
        return board                                                                                             
