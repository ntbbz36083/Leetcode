380. Insert Delete GetRandom O(1)
https://leetcode.com/problems/insert-delete-getrandom-o1/
class RandomizedSet(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.num = []
        self.dic = {}

    def insert(self, val):
        """
        Inserts a value to the set. Returns true if the set did not already contain the specified element.
        :type val: int
        :rtype: bool
        """
        if val not in self.dic:
            self.num.append(val)
            self.dic[val] = len(self.num)-1
            return True
        return False
    def remove(self, val):
        """
        Removes a value from the set. Returns true if the set contained the specified element.
        :type val: int
        :rtype: bool
        """
        if val in self.dic:
            index = self.dic[val]
            self.dic[self.num[-1]] = index
            self.num[index], self.num[-1] = self.num[-1], self.num[index]
            self.num.pop()
            del self.dic[val]
            return True
        return False

    def getRandom(self):
        """
        Get a random element from the set.
        :rtype: int
        """
        return self.num[random.randint(0,len(self.num)-1)]
        
        
710. Random Pick with Blacklist
https://leetcode.com/problems/random-pick-with-blacklist/
class Solution(object):

    def __init__(self, N, blacklist):
        """
        :type N: int
        :type blacklist: List[int]
        """
        self.size = N - len(blacklist)
        self.dic = {}
        self.last = N-1
        for b in blacklist:
            self.dic[b] = '666'
        for b in blacklist:
            if b >= self.size:
                continue
            while self.last in self.dic:
                self.last -= 1
            self.dic[b] = self.last
            self.last -= 1
        
    def pick(self):
        """
        :rtype: int
        """
        index = random.randint(0,self.size-1)
        if index in self.dic:
            return self.dic[index]
        return index
