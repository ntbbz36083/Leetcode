#752. Open the Lock
class Solution(object):
    def openLock(self, deadends, target):
        """
        :type deadends: List[str]
        :type target: str
        :rtype: int
        """
        depth = -1
        visited = set(deadends)
        q = collections.deque(['0000'])
        while q:
            size = len(q)
            depth += 1
            for _ in range(size):
                node = q.popleft()
                if node == target:
                    return depth
                if node in visited:
                    continue
                visited.add(node)
                q.extend(self.successor(node))
        return -1
    def successor(self, node):
        res = []
        for i, ch in enumerate(node):
            num = int(ch)
            res.append(node[:i] + str((num+1) % 10) + node[i+1:])
            res.append(node[:i] + str((num-1) % 10) + node[i+1:])
        return res
