111. Minimum Depth of Binary Tree
https://leetcode.com/problems/minimum-depth-of-binary-tree/

class Solution(object):
    def minDepth(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        if not root:
            return 0
        q = collections.deque([root])
        depth = 1
        
        while q:
            n = len(q)
            for x in range(n):
                node = q.popleft()
                if not node.left and not node.right:
                    return depth
                if node.left:
                    q.append(node.left)
                if node.right:
                    q.append(node.right)
            depth += 1
        return depth

127. Word Ladder
https://leetcode.com/problems/word-ladder/
import string
class Solution:
    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:
        if endWord not in wordList:
            return 0
        q = deque([(beginWord,1)])
        visited = set()
        wordList = set(wordList)
        char = string.ascii_lowercase
        while q:
            word, step = q.popleft()
            if word == endWord:
                return step
            for i in range(len(word)):
                for ch in char:
                    new = word[:i] + ch + word[i+1:]
                    if new in wordList and new not in visited:
                        visited.add(new)
                        q.append((new,step+1))
        return 0

314. Binary Tree Vertical Order Traversal
https://leetcode.com/problems/binary-tree-vertical-order-traversal/
class Solution:
    def verticalOrder(self, root: TreeNode) -> List[List[int]]:
        #T:O(n)
        #S:O(n)
        if not root:
            return []
        q = collections.deque([(0, root)])
        d = collections.defaultdict(list)
        res = []
        min_index, max_index = 0,0
        while q:
            col, node = q.popleft()
            d[col].append(node.val)
            if node.left:
                min_index = min(min_index, col-1)
                q.append((col-1, node.left))
            if node.right:
                max_index = max(max_index, col+1)
                q.append((col+1, node.right))
        for i in range(min_index, max_index+1):
            res.append(d[i])
        return res

490. The Maze
https://leetcode.com/problems/the-maze/
class Solution:
#T:O(mn)
#S:O(mn)
    def hasPath(self, maze: List[List[int]], start: List[int], destination: List[int]) -> bool:
        dire = [(0, 1), (0, -1), (-1, 0), (1, 0)]
        m, n = len(maze), len(maze[0])
        visited = [[False] * n for _ in range(m)]
        visited[start[0]][start[1]] = True
        q = collections.deque([(start[0], start[1])])
        
        while q:
            i,j = q.popleft()
            if i == destination[0] and j == destination[1]:
                return True
            for d in dire:
                x, y = i+d[0], j+d[1]
                while 0 <= x < m and 0 <= y < n and maze[x][y]==0:
                    x += d[0]
                    y += d[1]
                    
                x -= d[0]
                y -= d[1]
                if not visited[x][y]:
                    q.append((x,y))
                    visited[x][y] = True
        return False

505. The Maze II
https://leetcode.com/problems/the-maze-ii/
class Solution:
    def shortestDistance(self, maze: List[List[int]], start: List[int], destination: List[int]) -> int:
        dire = [(0, 1), (0, -1), (-1, 0), (1, 0)]
        m, n = len(maze), len(maze[0])
        visited = collections.defaultdict(int)
        q = []
        heapq.heappush(q,(0, start[0], start[1]))
        def go(start, direction):
            # return the stop position and length
            i, j = start
            ii, jj = direction
            l=0
            while 0<=i+ii<m and 0<=j+jj<n and maze[i+ii][j+jj]!=1:
                i+=ii
                j+=jj
                l+=1
            return l, (i,j)
        while q:
            val, i, j = heapq.heappop(q)
            if (i,j) in visited and visited[(i,j)] <= val:
                continue
            visited[(i,j)] = val
            if [i,j] == destination:
                return val
            for d in dire:
                l, [x, y] = go((i,j), d)
                heapq.heappush(q,(val+l, x,y))
        return -1


752. Open the Lock
https://leetcode.com/problems/open-the-lock/

class Solution(object):
    def openLock(self, deadends, target):
        """
        :type deadends: List[str]
        :type target: str
        :rtype: int
        """
        visited, q, depth = set(deadends), collections.deque(['0000']), 0
        while q:
            n = len(q)
            for i in range(n):
                node = q.popleft()
                if node == target:
                    return depth
                if node in visited:
                    continue
                visited.add(node)
                q.extend(self.succ(node))
            depth += 1
        return -1
    
    def succ(self, src):
        res = []
        for i, ch in enumerate(src):
            num = int(ch)
            res.append(src[:i] + str((num-1)%10) + src[i+1:])
            res.append(src[:i] + str((num+1)%10) + src[i+1:])
        return res

909. Snakes and Ladders
https://leetcode.com/problems/snakes-and-ladders/
class Solution:
    def snakesAndLadders(self, board: List[List[int]]) -> int:
        arr = [0]
        
        board.reverse()
        for i, row in enumerate(board):
            if i % 2 == 0:
                arr += row
            else:
                arr += row[::-1]
        nn = len(board)**2
        q = deque([1])
        visited = set()
        move = 0
        while q:
            new = deque([])
            while q:
                square = q.popleft()
                if square == nn:
                    return move
                for i in range(1,7):
                    if square + i <= nn and square+i not in visited:
                        visited.add(square+i)
                        if arr[square+i] > -1:
                            new.append(arr[square+i])
                        else:
                            new.append(square+i)
            q = new
            move += 1
        return -1

994. Rotting Oranges
https://leetcode.com/problems/rotting-oranges/
class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:
        visited = set()
        q = deque([])
        dire = [(0, 1), (0, -1), (-1, 0), (1, 0)]
        res = 0
        cnt = 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == 2:
                    q.append((i,j))
                elif grid[i][j] == 1:
                    cnt += 1
        while q:
            #new = deque([])
            for _ in range(len(q)):
                i,j = q.popleft()
                for d in dire:
                    x,y = i+d[0], j + d[-1]
                    if 0 <= x < len(grid) and 0 <= y < len(grid[0]) and grid[x][y] == 1:
                        grid[x][y] = 2
                        q.append((x,y))
                        cnt -= 1
            #q = new
            res += 1
        if cnt:
            return -1
        return max(0,res-1)

1197. Minimum Knight Moves
https://leetcode.com/problems/minimum-knight-moves/
class Solution:
    def minKnightMoves(self, x: int, y: int) -> int:
        q = deque([(0,0,0)])
        x,y = abs(x), abs(y)
        dire = [(-2,1), (-1,2), (1,2), (2,1), (2,-1), (1,-2)]
        visited = set()
        while q:
            i,j, step = q.popleft()
            if i == x and j == y:
                return step
            for d in dire:
                ii, jj = i + d[0], j + d[-1]
                if (ii,jj) not in visited and -1 <= ii <= x+2 and -1 <= jj <= y+2:
                    q.append((ii,jj,step+1))
                    visited.add((ii,jj))
        return -1
