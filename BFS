##752. Open the Lock
class Solution(object):
    def openLock(self, deadends, target):
        """
        :type deadends: List[str]
        :type target: str
        :rtype: int
        """
        depth = -1
        visited = set(deadends)
        q = collections.deque(['0000'])
        while q:
            size = len(q)
            depth += 1
            for _ in range(size):
                node = q.popleft()
                if node == target:
                    return depth
                if node in visited:
                    continue
                visited.add(node)
                q.extend(self.successor(node))
        return -1
    def successor(self, node):
        res = []
        for i, ch in enumerate(node):
            num = int(ch)
            res.append(node[:i] + str((num+1) % 10) + node[i+1:])
            res.append(node[:i] + str((num-1) % 10) + node[i+1:])
        return res
##286. Walls and Gates
class Solution(object):
    def wallsAndGates(self, rooms):
        """
        :type rooms: List[List[int]]
        :rtype: None Do not return anything, modify rooms in-place instead.
        """
        if not rooms:
            return
        for i in range(len(rooms)):
            for j in range(len(rooms[0])):
                if rooms[i][j] == 0:
                    self.helper(i,j,rooms,0)
        
        
    def helper(self,ii,jj,a,val):
        if ii < 0 or ii >= len(a) or jj < 0 or jj >= len(a[0]) or a[ii][jj] < val:
            return
        a[ii][jj] = val
        self.helper(ii+1,jj,a,val+1)
        self.helper(ii-1,jj,a,val+1)
        self.helper(ii,jj+1,a,val+1)
        self.helper(ii,jj-1,a,val+1)
class Solution(object):
    def wallsAndGates(self, rooms):
        """
        :type rooms: List[List[int]]
        :rtype: None Do not return anything, modify rooms in-place instead.
        """
        if not rooms:
            return
        r = len(rooms)
        c = len(rooms[0])
        for i in range(r):
            for j in range(c):
                if rooms[i][j] == 0:
                    q = collections.deque([(i-1,j,1),(i+1,j,1),(i,j-1,1),(i,j+1,1)])
                    while q:
                        x, y, val = q.popleft()
                        if x < 0 or x >= r or y < 0 or y >= c or rooms[x][y] <= val:
                            continue
                        rooms[x][y] = val
                        q.extend([(x+1,y,val+1),(x-1,y,val+1),(x,y+1,val+1),(x,y-1,val+1)])
##200. Number of Islands                            
class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        if not grid: return 0
        r, c = len(grid), len(grid[0])
        visited = [[False for _ in range(c)] for _ in range(r)]

        def dfs(i, j):
            if i < 0 or i >= r or j < 0 or j >= c or grid[i][j] == '0' or visited[i][j]:
                return
            visited[i][j] = True
            dfs(i + 1, j)
            dfs(i - 1, j)
            dfs(i, j + 1)
            dfs(i, j - 1)

        count = 0
        for i in range(r):
            for j in range(c):
                if not visited[i][j] and grid[i][j] == '1':
                    dfs(i, j)
                    count += 1
        return count
class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        if not grid:
            return 0
        count = 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == '1':
                    self.helper(i,j,grid)
                    count += 1
        return count
    def helper(self,ii, jj, grid):
        if ii < 0 or ii >= len(grid) or jj < 0 or jj >= len(grid[0]) or grid[ii][jj] != '1':
            return
        grid[ii][jj] = '#'
        self.helper(ii+1,jj,grid)
        self.helper(ii-1,jj,grid)
        self.helper(ii,jj+1,grid)
        self.helper(ii,jj-1,grid)
    def numIslandsBFS(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        if not grid or not grid[0]:
            return 0

        m, n = len(grid), len(grid[0])
        count = 0
        for i in xrange(m):
            for j in xrange(n):
                if grid[i][j] == '1':
                    self.bfs(grid, i, j)
                    count += 1
        return count

    def bfs(self, grid, r, c):
        queue = collections.deque()
        queue.append((r, c))
        grid[r][c] = '0'
        while queue:
            directions = [(0,1), (0,-1), (-1,0), (1,0)]
            r, c = queue.popleft()
            for d in directions:
                nr, nc = r + d[0], c + d[1]    
                if self.is_valid(grid, nr, nc) and grid[nr][nc] == '1':
                    queue.append((nr, nc))
                    grid[nr][nc] = '0'
##279. Perfect Squares
class Solution(object):
    def numSquares(self, n):
        """
        :type n: int
        :rtype: int
        """
        if n < 2:
            return n
        lst = []
        i = 1
        while i*i <= n:
            lst.append(i*i)
            i += 1
        count = 0
        dic = {n}
        while dic:
            count += 1
            temp = set()
            for x in dic:
                for y in lst:
                    if x == y:
                        return count
                    elif x < y:
                        break
                    temp.add(x-y)
            dic = temp
        return count
