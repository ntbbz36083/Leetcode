111. Minimum Depth of Binary Tree
https://leetcode.com/problems/minimum-depth-of-binary-tree/

class Solution(object):
    def minDepth(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        if not root:
            return 0
        q = collections.deque([root])
        depth = 1
        
        while q:
            n = len(q)
            for x in range(n):
                node = q.popleft()
                if not node.left and not node.right:
                    return depth
                if node.left:
                    q.append(node.left)
                if node.right:
                    q.append(node.right)
            depth += 1
        return depth

314. Binary Tree Vertical Order Traversal
https://leetcode.com/problems/binary-tree-vertical-order-traversal/
class Solution:
    def verticalOrder(self, root: TreeNode) -> List[List[int]]:
        #T:O(n)
        #S:O(n)
        if not root:
            return []
        q = collections.deque([(0, root)])
        d = collections.defaultdict(list)
        res = []
        min_index, max_index = 0,0
        while q:
            col, node = q.popleft()
            d[col].append(node.val)
            if node.left:
                min_index = min(min_index, col-1)
                q.append((col-1, node.left))
            if node.right:
                max_index = max(max_index, col+1)
                q.append((col+1, node.right))
        for i in range(min_index, max_index+1):
            res.append(d[i])
        return res

752. Open the Lock
https://leetcode.com/problems/open-the-lock/

class Solution(object):
    def openLock(self, deadends, target):
        """
        :type deadends: List[str]
        :type target: str
        :rtype: int
        """
        visited, q, depth = set(deadends), collections.deque(['0000']), 0
        while q:
            n = len(q)
            for i in range(n):
                node = q.popleft()
                if node == target:
                    return depth
                if node in visited:
                    continue
                visited.add(node)
                q.extend(self.succ(node))
            depth += 1
        return -1
    
    def succ(self, src):
        res = []
        for i, ch in enumerate(src):
            num = int(ch)
            res.append(src[:i] + str((num-1)%10) + src[i+1:])
            res.append(src[:i] + str((num+1)%10) + src[i+1:])
        return res
        
